/**
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
export class NgSimpleCarouselComponent {
    constructor() {
        this.objectFit = 'contain';
        // @Input() infinite = false;
        this.imgChange = new EventEmitter();
        this.activeIndex = 0;
        this.scroll$ = new BehaviorSubject(false);
        this.destroy$ = new Subject();
    }
    ngOnInit() {
        this.controller.jump$.pipe(takeUntil(this.destroy$)).subscribe(id => this.jumpTo(id));
        this.controller.action$.pipe(takeUntil(this.destroy$)).subscribe(action => action === 'prev' ? this.onPrev() : this.onNext());
    }
    ngAfterViewInit() {
        this.initObserve();
        this.startObserve();
    }
    initObserve() {
        const rootEl = this.containerEl.nativeElement;
        const options = {
            root: rootEl,
            rootMargin: '0px -50%',
        };
        this.observer = new IntersectionObserver((entries, observer) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const activeId = entry.target.id;
                    const newInd = this.images.findIndex(img => img.id === activeId);
                    this.onImgChange(activeId, newInd);
                }
            });
        }, options);
    }
    startObserve() {
        const rootEl = this.containerEl.nativeElement;
        Array.from(rootEl.children).forEach(img => this.observer.observe(img));
    }
    stopObserve() {
        this.observer.disconnect();
    }
    // Observer will call onImgChange()
    jumpTo(id) {
        const newInd = this.images.findIndex(img => img.id === id);
        if (this.activeIndex === newInd) {
            return;
        }
        const rootEl = this.containerEl.nativeElement;
        rootEl.scrollTo({
            top: 0,
            left: rootEl.offsetWidth * newInd,
            behavior: 'smooth'
        });
    }
    onPrev() {
        let newId;
        if (this.activeIndex - 1 >= 0) {
            newId = this.images[this.activeIndex - 1].id;
        }
        // if (this.infinite && this.activeIndex - 1 < 0) { newId = this.images[this.images.length - 1].id; }
        if (newId) {
            this.jumpTo(newId);
        }
    }
    onNext() {
        let newId;
        if (this.activeIndex + 1 < this.images.length) {
            newId = this.images[this.activeIndex + 1].id;
        }
        // if (this.infinite && this.activeIndex + 1 > this.images.length - 1) { newId = this.images[0].id; }
        if (newId) {
            this.jumpTo(newId);
        }
    }
    onImgChange(id, index) {
        if (this.activeIndex === index) {
            return;
        }
        this.activeIndex = index;
        this.imgChange.emit(id);
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
        this.stopObserve();
    }
}
NgSimpleCarouselComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-simple-carousel',
                template: "<!--\n Copyright 2020 Google LLC\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n-->\n\n<div class=\"ng-simple-carousel\" #container>\n  <div class=\"img_wrap\" *ngFor=\"let img of images; let i = index\" [id]=\"img.id\">\n    <picture>\n      <source *ngFor=\"let source of img?.sources\" [srcset]=\"source.srcset\" [type]=\"source.type\" [sizes]=\"source.sizes\">\n      <img class=\"img\" [class.activeImg]=\"i === activeIndex\" [class.prev]=\"i === activeIndex - 1\"\n        [class.next]=\"i === activeIndex + 1\" [src]=\"img.src\" [style.object-fit]=\"objectFit\" [srcset]=\"img.srcset\"\n        [alt]=\"img.alt\" [sizes]=\"img.sizes\" #image>\n    </picture>\n  </div>\n</div>\n",
                styles: [".ng-simple-carousel{max-width:100%;width:100%;height:100%;overflow-x:scroll;overflow-y:hidden;scroll-snap-type:x mandatory;display:flex;align-items:center;flex-flow:row nowrap;-ms-overflow-style:none;scrollbar-width:none}.ng-simple-carousel::-webkit-scrollbar{display:none}.img_wrap{flex-shrink:0;padding:0 1px}.img,.img_wrap{width:100%;height:100%}.img{scroll-snap-align:start;-o-object-fit:contain;object-fit:contain}"]
            },] }
];
NgSimpleCarouselComponent.ctorParameters = () => [];
NgSimpleCarouselComponent.propDecorators = {
    containerEl: [{ type: ViewChild, args: ['container',] }],
    controller: [{ type: Input }],
    images: [{ type: Input }],
    objectFit: [{ type: Input }],
    imgChange: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Fyb3VzZWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctc2ltcGxlLWNhcm91c2VsL3NyYy9saWIvY2Fyb3VzZWwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7OztHQWNHO0FBRUgsT0FBTyxFQUFpQixTQUFTLEVBQWMsWUFBWSxFQUFFLEtBQUssRUFBcUIsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNoSSxPQUFPLEVBQUUsZUFBZSxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNoRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFnQzNDLE1BQU0sT0FBTyx5QkFBeUI7SUFZcEM7UUFSUyxjQUFTLEdBQXdCLFNBQVMsQ0FBQztRQUNwRCw2QkFBNkI7UUFDbkIsY0FBUyxHQUF5QixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQy9ELGdCQUFXLEdBQUcsQ0FBQyxDQUFDO1FBRWhCLFlBQU8sR0FBRyxJQUFJLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNyQyxhQUFRLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztJQUVmLENBQUM7SUFFakIsUUFBUTtRQUNOLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3RGLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxLQUFLLE1BQU0sQ0FBQyxDQUFDLENB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UUFDaEcscUdBQXFHO1FBQ3JHLElBQUksS0FBSyxFQUFFO1lBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUFFO0lBQ3BDLENBQUM7SUFFRCxXQUFXLENBQUMsRUFBVSxFQUFFLEtBQWE7UUFDbkMsSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLEtBQUssRUFBRTtZQUFFLE9BQU87U0FBRTtRQUMzQyxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztRQUN6QixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDckIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDckIsQ0FBQzs7O1lBM0ZGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsb0JBQW9CO2dCQUM5QixrckNBQThCOzthQUUvQjs7OzswQkFFRSxTQUFTLFNBQUMsV0FBVzt5QkFDckIsS0FBSztxQkFDTCxLQUFLO3dCQUNMLEtBQUs7d0JBRUwsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdCwgT3V0cHV0LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQ2Fyb3VzZWxDb250cm9sbGVyIH0gZnJvbSAnLi9jYXJvdXNlbC5jb250cm9sbGVyJztcblxuZXhwb3J0IGludGVyZmFjZSBDYXJvdXNlbEltYWdlIHtcbiAgaWQ6IHN0cmluZztcbiAgc3JjOiBzdHJpbmc7XG4gIGFsdD86IHN0cmluZztcbiAgLyoqXG4gICAqIFtGb3IgUmVzcG9uc2l2ZSBJbWFnZV17QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9MZWFybi9IVE1ML011bHRpbWVkaWFfYW5kX2VtYmVkZGluZy9SZXNwb25zaXZlX2ltYWdlc31cbiAgICovXG4gIHNyY3NldD86IHN0cmluZztcbiAgLyoqXG4gICAqIFtGb3IgUmVzcG9uc2l2ZSBJbWFnZV17QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9MZWFybi9IVE1ML011bHRpbWVkaWFfYW5kX2VtYmVkZGluZy9SZXNwb25zaXZlX2ltYWdlc31cbiAgICovXG4gIHNpemVzPzogc3RyaW5nO1xuICBzb3VyY2VzPzogQ2Fyb3VzZWxJbWFnZVNvdXJjZVtdO1xufVxuXG4vKipcbiAqIFtGb3Igc291cmNlIGluIHBpY3R1cmUgZWxlbWVudF17QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvamEvZG9jcy9XZWIvSFRNTC9FbGVtZW50L3BpY3R1cmV9XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ2Fyb3VzZWxJbWFnZVNvdXJjZSB7XG4gIHNyY3NldDogc3RyaW5nO1xuICB0eXBlPzogc3RyaW5nO1xuICBzaXplcz86IHN0cmluZztcbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbmctc2ltcGxlLWNhcm91c2VsJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2Nhcm91c2VsLmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9jYXJvdXNlbC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgTmdTaW1wbGVDYXJvdXNlbENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95LCBBZnRlclZpZXdJbml0IHtcbiAgQFZpZXdDaGlsZCgnY29udGFpbmVyJykgY29udGFpbmVyRWw6IEVsZW1lbnRSZWY7XG4gIEBJbnB1dCgpIGNvbnRyb2xsZXI6IENhcm91c2VsQ29udHJvbGxlcjtcbiAgQElucHV0KCkgaW1hZ2VzOiBDYXJvdXNlbEltYWdlW107XG4gIEBJbnB1dCgpIG9iamVjdEZpdDogJ2NvbnRhaW4nIHwgJ2NvdmVyJyA9ICdjb250YWluJztcbiAgLy8gQElucHV0KCkgaW5maW5pdGUgPSBmYWxzZTtcbiAgQE91dHB1dCgpIGltZ0NoYW5nZTogRXZlbnRFbWl0dGVyPHN0cmluZz4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIGFjdGl2ZUluZGV4ID0gMDtcbiAgb2JzZXJ2ZXI6IEludGVyc2VjdGlvbk9ic2VydmVyO1xuICBzY3JvbGwkID0gbmV3IEJlaGF2aW9yU3ViamVjdChmYWxzZSk7XG4gIGRlc3Ryb3kkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMuY29udHJvbGxlci5qdW1wJC5waXBlKHRha2VVbnRpbCh0aGlzLmRlc3Ryb3kkKSkuc3Vic2NyaWJlKGlkID0+IHRoaXMuanVtcFRvKGlkKSk7XG4gICAgdGhpcy5jb250cm9sbGVyLmFjdGlvbiQucGlwZSh0YWtlVW50aWwodGhpcy5kZXN0cm95JCkpLnN1YnNjcmliZShhY3Rpb24gPT4gYWN0aW9uID09PSAncHJldicgPyB0aGlzLm9uUHJldigpIDogdGhpcy5vbk5leHQoKSk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5pbml0T2JzZXJ2ZSgpO1xuICAgIHRoaXMuc3RhcnRPYnNlcnZlKCk7XG4gIH1cblxuICBpbml0T2JzZXJ2ZSgpIHtcbiAgICBjb25zdCByb290RWwgPSB0aGlzLmNvbnRhaW5lckVsLm5hdGl2ZUVsZW1lbnQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIHJvb3Q6IHJvb3RFbCxcbiAgICAgIHJvb3RNYXJnaW46ICcwcHggLTUwJScsXG4gICAgfTtcbiAgICB0aGlzLm9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKChlbnRyaWVzLCBvYnNlcnZlcikgPT4ge1xuICAgICAgZW50cmllcy5mb3JFYWNoKGVudHJ5ID0+IHtcbiAgICAgICAgaWYgKGVudHJ5LmlzSW50ZXJzZWN0aW5nKSB7XG4gICAgICAgICAgY29uc3QgYWN0aXZlSWQgPSBlbnRyeS50YXJnZXQuaWQ7XG4gICAgICAgICAgY29uc3QgbmV3SW5kID0gdGhpcy5pbWFnZXMuZmluZEluZGV4KGltZyA9PiBpbWcuaWQgPT09IGFjdGl2ZUlkKVxuICAgICAgICAgIHRoaXMub25JbWdDaGFuZ2UoYWN0aXZlSWQsIG5ld0luZCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhcnRPYnNlcnZlKCkge1xuICAgIGNvbnN0IHJvb3RFbCA9IHRoaXMuY29udGFpbmVyRWwubmF0aXZlRWxlbWVudCBhcyBIVE1MRWxlbWVudDtcbiAgICBBcnJheS5mcm9tKHJvb3RFbC5jaGlsZHJlbikuZm9yRWFjaChpbWcgPT4gdGhpcy5vYnNlcnZlci5vYnNlcnZlKGltZykpO1xuICB9XG5cbiAgc3RvcE9ic2VydmUoKSB7XG4gICAgdGhpcy5vYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gIH1cblxuICAvLyBPYnNlcnZlciB3aWxsIGNhbGwgb25JbWdDaGFuZ2UoKVxuICBqdW1wVG8oaWQ6IHN0cmluZykge1xuICAgIGNvbnN0IG5ld0luZCA9IHRoaXMuaW1hZ2VzLmZpbmRJbmRleChpbWcgPT4gaW1nLmlkID09PSBpZCk7XG4gICAgaWYgKHRoaXMuYWN0aXZlSW5kZXggPT09IG5ld0luZCkgeyByZXR1cm47IH1cbiAgICBjb25zdCByb290RWwgPSB0aGlzLmNvbnRhaW5lckVsLm5hdGl2ZUVsZW1lbnQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgcm9vdEVsLnNjcm9sbFRvKHtcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6IHJvb3RFbC5vZmZzZXRXaWR0aCAqIG5ld0luZCxcbiAgICAgIGJlaGF2aW9yOiAnc21vb3RoJ1xuICAgIH0pO1xuICB9XG5cbiAgb25QcmV2KCkge1xuICAgIGxldCBuZXdJZDtcbiAgICBpZiAodGhpcy5hY3RpdmVJbmRleCAtIDEgPj0gMCkgeyBuZXdJZCA9IHRoaXMuaW1hZ2VzW3RoaXMuYWN0aXZlSW5kZXggLSAxXS5pZDsgfVxuICAgIC8vIGlmICh0aGlzLmluZmluaXRlICYmIHRoaXMuYWN0aXZlSW5kZXggLSAxIDwgMCkgeyBuZXdJZCA9IHRoaXMuaW1hZ2VzW3RoaXMuaW1hZ2VzLmxlbmd0aCAtIDFdLmlkOyB9XG4gICAgaWYgKG5ld0lkKSB7IHRoaXMuanVtcFRvKG5ld0lkKTsgfVxuICB9XG5cbiAgb25OZXh0KCkge1xuICAgIGxldCBuZXdJZDtcbiAgICBpZiAodGhpcy5hY3RpdmVJbmRleCArIDEgPCB0aGlzLmltYWdlcy5sZW5ndGgpIHsgbmV3SWQgPSB0aGlzLmltYWdlc1t0aGlzLmFjdGl2ZUluZGV4ICsgMV0uaWQ7IH1cbiAgICAvLyBpZiAodGhpcy5pbmZpbml0ZSAmJiB0aGlzLmFjdGl2ZUluZGV4ICsgMSA+IHRoaXMuaW1hZ2VzLmxlbmd0aCAtIDEpIHsgbmV3SWQgPSB0aGlzLmltYWdlc1swXS5pZDsgfVxuICAgIGlmIChuZXdJZCkgeyB0aGlzLmp1bXBUbyhuZXdJZCk7IH1cbiAgfVxuXG4gIG9uSW1nQ2hhbmdlKGlkOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpIHtcbiAgICBpZiAodGhpcy5hY3RpdmVJbmRleCA9PT0gaW5kZXgpIHsgcmV0dXJuOyB9XG4gICAgdGhpcy5hY3RpdmVJbmRleCA9IGluZGV4O1xuICAgIHRoaXMuaW1nQ2hhbmdlLmVtaXQoaWQpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5kZXN0cm95JC5uZXh0KCk7XG4gICAgdGhpcy5kZXN0cm95JC5jb21wbGV0ZSgpO1xuICAgIHRoaXMuc3RvcE9ic2VydmUoKTtcbiAgfVxuXG59XG4iXX0=